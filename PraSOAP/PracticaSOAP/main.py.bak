from fastapi import FastAPI, Request, Response
from fastapi.responses import Response as FastAPIResponse
import json
from pathlib import Path
from typing import List
from pydantic import BaseModel

app = FastAPI()

class User(BaseModel):
    id: int
    name: str
    email: str
    age: int

DATA_FILE = "users.json"

def init_db():
    if not Path(DATA_FILE).exists():
        with open(DATA_FILE, 'w') as f:
            json.dump([], f)

def read_users() -> List[User]:
    with open(DATA_FILE, 'r') as f:
        data = json.load(f)
        return [User(**user) for user in data]

def write_users(users: List[User]):
    with open(DATA_FILE, 'w') as f:
        json.dump([user.dict() for user in users], f, indent=2)

def create_soap_response(body_content: str) -> str:
    return f'''<?xml version="1-0" encoding="UTF-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
    <soap:Body>
        {body_content}
    </soap:Body>
</soap:Body>'''

def user_to_xml(user: User) -> str:
    return f"""<User>
    <id>{user.id}</id>
    <name>{user.name}</name>
    <email>{user.email}</email>
    <age>{user.age}</age>
</User>"""

def parse_soap_request(xml_content: str) -> dict:
    import re

    operation = re.search(r'<(\w+)Request', xml_content)
    if not operation:
        return {}

    op_name = operation.group(1)
    params = {}

    if 'id>' in xml_content:
        id_match = re.search(r'<id>(\d+)</id>', xml_content)
        if id_match:
            params['id'] = int(id_match.group(1))
    
    if 'name>' in xml_content:
        name_match = re.search(r'<name>([^<]+)</name>', xml_content)
        if name_match:
            params['name'] = name_match.group(1)
    
    if 'email>' in xml_content:
        email_match = re.search(r'<email>([^<]+)</email>', xml_content)
        if email_match:
            params['email'] = email_match.group(1)
    
    if 'age>' in xml_content:
        age_match = re.search(r'<age>(\d+)</age>', xml_content)
        if age_match:
            params['age'] = int(age_match.group(1))

    return {'operation': op_name, 'params': params}

@app.on_event('startup')
def startup_event():
    init_db()

@app.post("/soap")
async def soap_endpoint(request: Request):
    body = await request.body()
    xml_content = body.decode('utf-8')
    
    soap_data = parse_soap_request(xml_content)
    operation = soap_data.get('operation')
    params = soap_data.get('params', {})
    
    if operation == "GetAllUsers":
        users = read_users()
        users_xml = "\n        ".join([user_to_xml(u) for u in users])
        response_body = f"""<GetAllUsersResponse>
        {users_xml}
    </GetAllUsersResponse>"""
    
    elif operation == "GetUser":
        user_id = params.get('id')
        users = read_users()
        user = next((u for u in users if u.id == user_id), None)
        if user:
            response_body = f"""<GetUserResponse>
        {user_to_xml(user)}
    </GetUserResponse>"""
        else:
            response_body = f"""<GetUserResponse>
        <error>User not found</error>
    </GetUserResponse>"""
    
    elif operation == "CreateUser":
        users = read_users()
        new_id = max([u.id for u in users], default=0) + 1
        new_user = User(
            id=new_id,
            name=str(params.get('name')),
            email=params.get('email'),
            age=params.get('age')
        )
        users.append(new_user)
        write_users(users)
        response_body = f"""<CreateUserResponse>
        <success>true</success>
        {user_to_xml(new_user)}
    </CreateUserResponse>"""
    
    elif operation == "DeleteUser":
        user_id = params.get('id')
        users = read_users()
        users = [u for u in users if u.id != user_id]
        write_users(users)
        response_body = f"""<DeleteUserResponse>
        <success>true</success>
        <message>User deleted successfully</message>
    </DeleteUserResponse>"""
    
    else:
        response_body = """<Error>
        <message>Unknown operation</message>
    </Error>"""
    
    soap_response = create_soap_response(response_body)
    
    return FastAPIResponse(
        content=soap_response,
        media_type="text/xml"
    )

@app.get("/")
def root():
    return {"message": "SOAP API Server - Use POST /soap endpoint"}